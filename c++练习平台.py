# Author: Su

import time
import base64
import json
import requests
from PIL import Image
from lxml import etree
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options


def base64_api(img):
    with open(img, 'rb') as f:
        base64_data = base64.b64encode(f.read())
        b64 = base64_data.decode()
    data = {"username": "", "password": "", "typeid": 3, "image": b64}
    result = json.loads(requests.post("http://api.ttshitu.com/predict", json=data).text)
    if result['success']:
        return result["data"]["result"]
    else:
        #！！！！！！！注意：返回 人工不足等 错误情况 请加逻辑处理防止脚本卡死 继续重新 识别
        return result["message"]
    return ""

def shua(username,password):
    opt = Options()
    opt.add_argument('--start-maximized')              # 最大化运行（全屏窗口）,不设置，取元素会报错

    yan_zhen_png = "c++.png"

    base_url = "https://prg.cqupt.edu.cn"
    url = "https://prg.cqupt.edu.cn/main.jsp"
    driver = uc.Chrome(options=opt)
    driver.get(base_url)
    time.sleep(2)
    yanzhengma = driver.find_element(by=By.XPATH,value='/html/body/div[1]/div[2]/div[3]/div[3]/div/div/form/div[3]/img')
    # print (  "验证码的坐标为：" , yanzhengma.location)  #控制台查看{'x': 1155, 'y': 256}
    # print (  "验证码的大小为：" , yanzhengma.size)  # 图片大小{'height': 48, 'width': 130}
    driver.save_screenshot(yan_zhen_png)
    left_top_corner_index = yanzhengma.location
    left_top_x = left_top_corner_index['x']
    left_top_y = left_top_corner_index['y']
    right_down_x = left_top_x + yanzhengma.size['width']
    right_down_y = left_top_y + yanzhengma.size['height']
    image = Image.open(yan_zhen_png)
    crop_image = image.crop((left_top_x+250, left_top_y+50, right_down_x+350, right_down_y+90))
    # print("已经截取到验证码了")
    crop_image.save(yan_zhen_png)
    driver.find_element(by=By.ID,value="username").send_keys(username)
    driver.find_element(by=By.ID,value="password").send_keys(password)
    jiaoyan = base64_api(yan_zhen_png)
    driver.find_element(by=By.ID,value="captchaCode").send_keys(jiaoyan)
    driver.find_element(by=By.XPATH,value="/html/body/div[1]/div[2]/div[3]/div[3]/div/div/form/div[4]/button").click()
    time.sleep(1)
    # 点击平时刷题,这个可能需要自己改改xpath，因为不定平时刷题是哪个。对应修改一下就OK
    driver.find_element(by=By.XPATH,value="/html/body/div/div[4]/div[2]/div[2]/div/div/a").click()
    time.sleep(1)

    tree = etree.HTML(driver.page_source)
    danxuan_trs = tree.xpath('//*[@id="indexProsByKindDIV65536"]/table/tbody/tr')
    chengxupianduan_trs = tree.xpath('//*[@id="indexProsByKindDIV64"]/table/tbody/tr')
    chengxupianduan_urls = []
    for tr in chengxupianduan_trs:
        chengxupianduan_urls.append("https://prg.cqupt.edu.cn/"+tr.xpath("./td[1]/a/@href")[0])
    chengxupianduan_urls = chengxupianduan_urls[::-1][0:65]

    danxuan_list = ['d', 'a', 'c', 'c', 'a', 'd', 'c', 'c', 'd', 'a', 'a', 'd', 'd', 'b', 'a', 'b', 'd', 'b', 'a', 'a', 'c', 'b', 'c', 'a', 'd', 'd', 'd', 'b', 'c', 'd', 'c', 'a', 'd', 'd', 'c', 'b', 'd', 'b', 'c', 'd', 'b', 'd', 'a', 'd', 'c', 'c', 'a', 'a', 'd', 'b', 'd', 'd', 'd', 'a', 'd', 'c', 'd', 'd', 'd', 'b', 'd', 'd', 'c', 'c']
    i = 1
    for tr in danxuan_trs:
        # value = tr.xpath("./td/form/input[1]/@value")[0]
        if i ==3 or i == 14:
            i += 1
            continue   # 这两个空有点小问题，手动填一下就行了
        target = driver.find_element(by=By.XPATH,value=f"/html/body/div/div/div[2]/div[2]/table/tbody/tr[{i}]/td/form/input[1]")
        driver.execute_script("arguments[0].scrollIntoView();", target)  # 拖动到可见的元素去
        target.clear()
        target.send_keys(danxuan_list[i-1])
        i += 1
        time.sleep(1)
        # danxuan_list.append(value)
    # print(danxuan_list)


    chengxupianduan_answers = ['#include<iostream>\nusing namespace std;\n\nclass Client\n{\npublic:\n    Client() {\n        ClientNum++;\n    }\n    static void show() {\n        cout << "server name:" << ServerName << endl;\n        cout << "num of clients:" << ClientNum << endl;\n    }\n    static void changeServerName(char newname) {\n        ServerName = newname;\n    }\n    static int ClientNum;\n    static char ServerName;\n};\nchar Client::ServerName = \'A\';\nint Client::ClientNum = 0;', '#include<iostream>\nusing namespace std;\n\nclass Point\n{\npublic:\n    Point(int a=0, int b=0):x(a),y(b){}\n    //成员函数实现\n    //Point operator+(Point p) {\n    //    Point temp;\n    //    temp.x = this->x + p.x;\n    //    temp.y = this->y + p.y;\n    //    return temp;\n    //}\n    //Point operator-(Point p) {\n    //    Point temp;\n    //    temp.x = this->x - p.x;\n    //    temp.y = this->y - p.y;\n    //    return temp;\n    //}\n    //Point operator+=(Point p) {\n    //    this->x = this->x + p.x;\n    //    this->y = this->y + p.y;\n    //    return *this;\n    //}\n    //bool operator==(Point p) {\n    //    if (this->x == p.x && this->y == p.y) {\n    //        return true;\n    //    }\n    //    else {\n    //        return false;\n    //    }\n    //}\n    friend Point operator+(Point &p1, Point& p2);\n    friend Point operator-(Point& p1, Point& p2);\n    friend Point operator+=(Point& p1, Point& p2);\n    friend bool operator==(Point& p1, Point& p2);\n    int x, y;\n};\nostream& operator<<(ostream& cout, Point& p)\n{\n    cout << p.x << "," << p.y ;\n    return cout;\n}\n//友元函数实现\nPoint operator+(Point& p1, Point& p2)\n{\n    Point temp;\n    temp.x = p1.x + p2.x;\n    temp.y = p1.y + p2.y;\n    return temp;\n}\nPoint operator-(Point& p1, Point& p2)\n{\n    Point temp;\n    temp.x = p1.x - p2.x;\n    temp.y = p1.y - p2.y;\n    return temp;\n}\nPoint operator+=(Point& p1, Point& p2) \n{\n    p1.x = p1.x + p2.x;\n    p1.y = p1.y + p2.y;\n    return p1;\n}\nbool operator==(Point& p1, Point& p2) \n{\n    if (p1.x == p2.x && p1.y == p2.y) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}', '#include<iostream>\nusing namespace std;\n\nclass Vehicle\n{\npublic:\n    virtual void run() {\n        cout << "Vehicle run"<< endl;\n    };\n    virtual void stop() {\n        cout << "Vehicle stop" << endl;\n\n    };\n};\nclass Bicycle:public Vehicle\n{\npublic:\n    virtual void run() {\n        cout << "Bicycle run" << endl;\n    };\n    virtual void stop() {\n        cout << "Bicycle stop" << endl;\n\n    };\n};\nclass Motorcar :public Vehicle\n{\npublic:\n    virtual void run() {\n        cout << "Motorcar run" << endl;\n    };\n    virtual void stop() {\n        cout << "Motorcar stop" << endl;\n\n    };\n};\ntemplate<class T>\nvoid run(T tool)\n{\n    tool.run();\n}', '#include<iostream>\nusing namespace std;\n\ntemplate<class T>\nT myMax(T a, T b)\n{\n    return a > b ? a : b;\n}', '', '#include<iostream>\n#include<cmath>\n\nusing namespace std;\n\nclass Point\n{\npublic:\n    Point(double a, double b) :x(a),y(b){}\n    double x, y;\n};\nclass Circle\n{\npublic:\n    Circle(Point p, double r) :p(p), r(r) {}\n    bool isPointIn(Point &p2) {\n        double dist;\n        dist = sqrt((this->p.x- p2.x) * (this->p.x - p2.x) + (this->p.y - p2.y) * (this->p.y - p2.y));\n        if (r > dist) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    Point p;\n    double r;\n};', '#include<iostream>\nusing namespace std;\n\nclass Complex\n{\nprivate:\n    int real;\n    int imag;\npublic:\n    Complex(int x=0,int y=0):real(x),imag(y){}\n    void Display() {\n        cout << real << (imag > 0 ? "+" : "") << imag << "i" << endl;\n    }\n    friend Complex AddComplex(const Complex c1, const Complex c2);\n};\nComplex AddComplex(const Complex c1, const Complex c2) {\n    Complex temp;\n    temp.real = c1.real + c2.real;\n    temp.imag = c1.imag + c2.imag;\n    return temp;\n}', '#include<iostream>\n#include<cmath>\nusing namespace std;\n\nclass CPoint\n{\nprivate:\n    int x;\n    int y;\npublic:\n    friend class CLine;\n    CPoint(int x=0,int y=0):x(x),y(y){}\n    CPoint(const CPoint& p) {\n        this->x = p.x;\n        this->y = p.y;\n    }\n};\nclass CLine\n{\nprivate:\n    CPoint p1;\n    CPoint p2;\npublic:\n    CLine(CPoint p1,CPoint p2):p1(p1),p2(p2){\n        count++;\n    }\n    CLine(const CLine& line) {\n        this->p1 = line.p1;\n        this->p2 = line.p2;\n        count++;\n    }\n    int GetLen() {\n        return sqrt((p1.x-p2.x) * (p1.x - p2.x) + (p1.y-p2.y) * (p1.y - p2.y));\n    }\n    static int ShowCount() {\n        return count;\n    }\n    static int count;\n};\nint CLine::count = 0;', '#include<iostream>\n#include<cmath>\nusing namespace std;\n\nclass Point\n{\npublic:    //外部接口\n    Point(int a=0,int b=0):x(a),y(b){}\n    void move(int a, int b) {\n        this->x = a;\n        this->y = b;\n    }\n    friend int L1Distance(Point p1, Point p2);\nprivate:    //私有数据\n    int x;\n    int y;\n};\n\nclass ArrayofPoints\n{\npublic:\n    ArrayofPoints(int n) {\n        size = n;\n        arr = new Point[size];\n    }\n    ArrayofPoints(const ArrayofPoints& arr) {\n        this->size = arr.size;\n        this->arr = new Point[this->size];\n    }\n    ~ArrayofPoints() {\n        delete[] arr;\n    }\n    Point& element(int n) {\n        return arr[n];\n    }\n    int size;\n    Point *arr;\n};\n//计算任意两点之间的街区距离\nint L1Distance(Point p1, Point p2) {\n    return(abs(p1.x - p2.x) + abs(p1.y - p2.y));\n}', "#include<iostream>\nusing namespace std;\n\nclass CShape\n{\npublic:\n    virtual int Area() = 0;\n    virtual int Length() = 0;\n};\nclass CRectangle :public CShape\n{\npublic:\n    CRectangle(int a=0,int b=0):len(a), wid(b){}\n    int Area() {\n        return len * wid;\n    }\n    int Length() {\n        return 2 * (len + wid);\n    }\n    int len;\n    int wid;\n};\nclass CCuboid :public CRectangle\n{\npublic:\n    CCuboid(int a=0,int b=0,int c=0):len(a),wid(b),hig(c){}\n    int Area() {\n        return 2 * (len * wid + len * hig + wid * hig);\n    }\n    int Length() {\n        return 4 * (len + wid + hig);\n    }\n    int len;\n    int wid;\n    int hig;\n};\ntemplate<class T>\nvoid Display(T &a) {\n    cout << a.Area() << ',' << a.Length() << endl;\n}", "#include<iostream>\nusing namespace std;\n#define PI 3.14\n\nclass CCircle\n{\npublic:\n    CCircle(int r=0):r(r){}\n    double Area() {\n        return PI * r * r;\n    }\n    int r;\n};\n\nclass CCylinder\n{\npublic:\n    CCylinder(int a=0,int b=0):r(a),height(b){}\n    double Area() {\n        return PI * r * r;\n    }\n    double Volume() {\n        return PI * r * r * height;\n    }\n    int r;\n    int height;\n};\n\nvoid Display(CCircle& a)\n{\n    cout << a.Area() << endl;\n}\nvoid Display(CCylinder& a)\n{\n    //按题意应该是这个，但是这个审批结果只有体积，可能是题目写错了\n    //cout << a.Area() << ',' << a.Volume() << endl;\n    cout << a.Volume() << endl;\n}", '#include<iostream>\n#include<string.h>\nusing namespace std;\n\nclass Staff\n{\npublic:\n    string name;\n    int num;\n    int BasicSale;\n};\nclass Saleman:virtual public Staff\n{\npublic:\n    int personAmount;\n\n};\nclass Manager :virtual public Staff\n{\npublic:\n    int tatalAmount;\n};\nclass SaleManager :public Saleman, public Manager\n{\npublic:\n    SaleManager(int a,string b,int c,int d,int e){\n        Staff::num = a;\n        Staff::name = b;\n        Staff::BasicSale = c;\n        Saleman::personAmount = d;\n        Manager::tatalAmount = e;\n    }\n    void show()\n    {\n        cout << "num:" << Staff::num << endl;\n        cout << "name:" << Staff::name << endl;\n        cout << "BasicSale:" << Staff::BasicSale << endl;\n        cout << "personAmount:" << Saleman::personAmount << endl;\n        cout << "tatalAmount:" << Manager::tatalAmount << endl;\n    }\n};', '#include<iostream>\n#include<cmath>\nusing namespace std;\n\nclass Fraction\n{\nprivate:\nprivate:\n    int  nume;    //  分子\n    int  deno;    //  分母\npublic:\n    Fraction(long long  nu = 0, long long  de = 1) :nume(nu), deno(de) {\n        this->simplify();\n    }\n    Fraction(double n) {\n        this->nume = int(n);\n        this->deno = 1;\n    }\n    void  simplify() {\n        int m, n, r;\n        n = fabs(deno);\n        m = fabs(nume);\n        while (r = m % n)  // 求m，n的最大公约数\n        {\n            m = n;\n            n = r;\n        }\n        deno /= n;     // 化简\n        nume /= n;\n        if (deno < 0)  // 将分母转化为正数\n        {\n            deno = -deno;\n            nume = -nume;\n        }\n    }\n    friend  istream& operator>>(istream& cin, Fraction& x) {\n        char a;\n        cin >> x.nume >> a >> x.deno;\n        return cin;\n    }\n    friend  ostream& operator<<(ostream& cout, Fraction  x) {\n        if (x.deno == 1) {\n            cout << x.nume << endl;\n        }\n        else {\n            cout << x.nume << "/" << x.deno << endl;\n        }\n        return cout;\n    }\n    Fraction operator+(Fraction& a) {\n        Fraction temp;\n        temp.nume = this->nume * a.deno + a.nume * this->deno;\n        temp.deno = this->deno * a.deno;\n        temp.simplify();\n        return temp;\n    }\n    Fraction operator-(Fraction& a) {\n        Fraction temp;\n        temp.nume = this->nume * a.deno - a.nume * this->deno;\n        temp.deno = this->deno * a.deno;\n        temp.simplify();\n        return temp;\n    }\n    Fraction operator*(Fraction& a) {\n        Fraction temp;\n        temp.nume = this->nume *a.nume;\n        temp.deno = this->deno * a.deno;\n        temp.simplify();\n        return temp;\n    }\n    Fraction operator/(Fraction& a) {\n        Fraction temp;\n        temp.nume = this->nume * a.deno;\n        temp.deno = this->deno * a.nume;\n        temp.simplify();\n        return temp;\n    }\n    Fraction operator=(double a) {\n        int sum = 1;\n        while (int(a)!=a)\n        {\n            a = a * 10;\n            sum = sum * 10;\n        }\n        this->nume = a;\n        this->deno = sum;\n        this->simplify();\n        return *this;\n    }\n    operator double() {\n        return double(this->nume) / double(this->deno);\n    }\n    \n};', 'template<class T>\nclass Vector\n{\nprivate:\n    T* pAddress;\n    int size;\n    int capacity;\npublic:\n    Vector(int n=50){\n        capacity = n;\n        size = 0;\n        pAddress = new T[capacity];\n    }\n    ~Vector()\n    {\n        if (this->pAddress != NULL) {\n            delete[] this->pAddress;\n            this->pAddress = NULL;\n        }\n    }\n\n    T& add(const T& a) {\n        if (this->size == this->capacity) {\n            this->capacity = 2 * this->capacity;\n            T* newpAddress = new T[this->capacity];\n            for (int i = 0; i < size; i++) {\n                newpAddress[i] = this->pAddress[i];\n            }\n            delete[] this->pAddress;\n            this->pAddress = newpAddress;\n        }\n        this->pAddress[this->size] = a;\n        size++;\n        return this->pAddress[this->size-2];\n    }\n\n    int get_size() {\n        return this->size;\n    }\n\n    void remove(int index) {\n        if (index >= 0 && index < this->size) {\n            for (int i = index; i < size - 1; i++) {\n                this->pAddress[i] = this->pAddress[i + 1];\n            }\n            this->size--;\n        }\n    }\n\n    T& operator[](int index) {\n        return pAddress[index];\n    }\n    Vector(const Vector& vec)\n    {\n        this->capacity = vec.capacity;\n        this->size = vec.size;\n        this->pAddress = new T[vec.capacity];\n        for (int i = 0; i < this->size; i++) {\n            this->pAddress[i] = vec.pAddress[i];\n        }\n    }\n};', 'template<class T>\nT add(T& a, T& b)\n{\n    return a + b;\n}', 'void Swap(int& a, int& b)\n{\n    int temp = a;\n    a = b;\n    b = temp;\n}', 'int add(int a, int b = 20, int c = 30)\n{\n    return a + b + c;\n}', 'int* bubble_sort(int  n)\n{\n    int* p = new int[n];\n    for (int i = 0; i < n; i++)\n    {\n        cin >> p[i];\n    }\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            if (p[j] < p[i])\n            {\n                int temp = p[j];\n                p[j] = p[i];\n                p[i] = temp;\n            }\n        }\n    }\n    return p;\n}', 'void reverse_string(string &s)\n{\n    string temp = s;\n    for (int i = 0; i < s.length(); i++) {\n        s[i] = temp[temp.length()-1 - i];\n    }\n}', 'class Car\n{\npublic:\n    void disp_welcomemsg()\n    {\n        cout << "Welcome to the car world!" << endl;\n    }\n    void set_wheels(int num) {\n        this->wheel_num = num;\n    }\n    int get_wheels() {\n        return this->wheel_num;\n    }\n    int wheel_num;\n};', 'class Solution\n{\npublic:\n    int count_digits(string s) {\n        int num = 0;\n        for (int i = 0; i < s.length(); i++) {\n            if (48 <= int(s[i]) &&  int(s[i]) <= 57)\n            {\n                num++;\n            }\n        }\n        return num;\n    }\n};', 'class Animal\n{\npublic:\n    void speak() {\n        cout << "animal language!" << endl;\n    }\n};\n\nclass Cat :public Animal\n{\npublic:\n    Cat(string name):m_strName(name){}\n    void print_name() {\n        cout << "cat name: " << m_strName << endl;\n    }\nprivate:\n    string m_strName;\n};', 'class Animal\n{\nprotected:\n    int m_nAgeBase;\nprivate:\n    int m_nWeightBase;\npublic:\n    void set_weight(int w) {\n        this->m_nWeightBase = w;\n    }\n    void set_age(int a) {\n        this->m_nAgeBase = a;\n    }\n    int get_weight() {\n        return m_nWeightBase;\n    }\n};\n\nclass Cat :public Animal\n{\nprivate:\n    string m_strName;\npublic:\n    Cat(string name):m_strName(name){}\n    void print_age() {\n        cout << m_strName << ", age = " << m_nAgeBase << endl;\n    }\n};', 'class Animal\n{\nprotected:\n    int m_nAgeBase;\nprivate:\n    int m_nWeightBase;\npublic:\n    void set_weight(int w) {\n        this->m_nWeightBase = w;\n    }\n    void set_age(int a) {\n        this->m_nAgeBase = a;\n    }\n    int get_weight() {\n        return m_nWeightBase;\n    }\n};\n\nclass Cat :public Animal\n{\nprivate:\n    string m_strName;\npublic:\n    Cat(string name):m_strName(name){}\n    void set_print_age() {\n        this->m_nAgeBase = 5;\n        cout << m_strName << ", age = " << this->m_nAgeBase << endl;\n    }\n    void set_print_weight() {\n        this->set_weight(6);\n        cout << m_strName << ", weight = " << this->get_weight() << endl;\n    }\n};', 'class CMyClassB:public CMyClassA\n{\n    int  val;\npublic:\n    CMyClassB(int val):CMyClassA(3*val),val(val) {\n        printf("B:%d\\n", val);\n    };\n    void  virtual  print() {\n        printf("%d\\n", val);\n    };\n};', 'A A::operator+(A& a)\n{\n    A temp;\n    temp.x = this->x + a.x;\n    temp.y = this->y + a.y;\n    return temp;\n}\nA A::operator-(A& a)\n{\n    A temp;\n    temp.x = this->x - a.x;\n    temp.y = this->y - a.y;\n    return temp;\n}', 'class BigInteger\n{\npublic:\n    long long num;\n    BigInteger(){}\n    BigInteger operator*(BigInteger& a) {\n        BigInteger temp;\n        temp.num = a.num*this->num;\n        return temp;\n    }\n\n};\nistream& operator>>(istream &cin, BigInteger& a) {\n    cin >> a.num;\n    return cin;\n}\nostream& operator<<(ostream& cout, BigInteger& a) {\n    cout << a.num;\n    return cout;\n}', 'vector<int>  sieve(int  n)\n{\n    vector<int> vec;\n    for (int m = 1; m < n; m++) {\n        bool flag = 1;\n        if (m % 2 == 0 && m != 2 || m == 1) {\n            flag = 0;\n        }\n        //m = sqrt(m);这样可以简便计算\n        for (int i = 3; i < m; i += 2) {\n            if (m % i == 0) {\n                flag = 0;\n                break;\n            }\n        }\n        if (flag) {\n            vec.push_back(m);\n        }\n    }\n    return vec;\n}', 'void  pointDis(Point& p1, Point& p2)\n{\n    double dis;\n    dis = double(sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y)));\n    cout << fixed <<  setprecision(2) << dis << endl;\n}', '', '    TDVector(double &a,double &b):x(a),y(b) {}\n    void setX(double& n) {\n        x = n;\n    }\n    void setY(double& n) {\n        y = n;\n    }\n    double getX() {\n        return x;\n    }\n    double getY() {\n        return y;\n    }\n    TDVector operator+(TDVector& t) {\n        TDVector temp;\n        temp.x = this->x + t.x;\n        temp.y = this->y + t.y;\n        return temp;\n    }', '    Array(int n) {\n        size = n;\n        data = new int[size];\n    }\n    Array(const Array& arr) {\n        this->size = arr.size;\n        this->data = new int[arr.size];\n        for (int i = 0; i < this->size; i++) {\n            this->data[i] = arr.data[i];\n        }\n    }\n    Array &operator=(const Array arr) {\n        //if (this->data != NULL) {\n        //    delete[] this->data;\n        //    this->size = 0;\n        //    this->data = NULL;\n        //}\n        this->size = arr.size;\n        this->data = new int[arr.size];\n        for (int i = 0; i < this->size; i++) {\n            this->data[i] = arr.data[i];\n        }\n        return *this;\n    }', ':People(id,name) {\n        this->sid = sid;\n        this->score = score;\n    ', '#include<iostream>\nusing namespace std;\n\nclass Box\n{\npublic:\n int l, w, h;\n void get_value() {\n  cin >> l >> w >> h;\n }\n void display() {\n  cout << l * w * h;\n }\n};', '#include<iostream>\nusing namespace std;\n\nclass Date\n{\npublic:\n int day, month, year;\n Date(int month = 1,int day=1,int year = 2019):day(day),month(month),year(year){}\n void display() {\n  cout << this->month << "/" << this->day << "/" << this->year << endl;\n }\n};', '#include<iostream>\n#include<string.h>\nusing namespace std;\n\nclass Stud\n{\npublic:\n    int id;\n    string name;\n    int score;\n    static int num;\n    static int sum;\n    Stud(int id, string name, int score) {\n        this->id = id;\n        this->name = name;\n        this->score = score;\n        sum += score;\n        num++;\n    }\n    void disp() {\n        cout << this->id << "，" << this->name << "，" << this->score << endl;\n    }\n    static int  avg() {\n        return sum / num;\n    }\n};', 'void  max(Student* stu)\n{\n    int max_id = stu[0].num;\n    float max = stu[0].score;\n    for (int i = 1; i < 5; i++)\n    {\n        if (stu[i].score > max) {\n            max = stu[i].score;\n            max_id = stu[i].num;\n        }\n    }\n    cout << max_id << " " << max << endl;\n}', '#include<iostream>\n#include<string.h>\nusing namespace std;\n\nclass Student\n{\npublic:\n    int id;\n    string name;\n    char sex;\n    Student(int a,string b,char c):id(a),name(b),sex(c){\n        cout << "Constructor called." << endl;\n    }\n    void display() {\n        cout << "num:" << id << endl;\n        cout << "name:" << name << endl;\n        cout << "sex:" << sex << endl;\n        cout << "\\n";\n    }\n    ~Student()\n    {\n        cout << "Destructor called." << endl;\n    }\n};', 'void sort(Sport * sport,int n = 12)\n{\n\n    for (int i = 0; i < n; i++)\n    {\n        for (int j = i + 1; j < n; j++)\n        {\n            if (sport[j].grade < sport[i].grade)\n            {\n                Sport temp = sport[i];\n                sport[i] = sport[j];\n                sport[j] = temp;\n            }\n        }\n    }\n}\n\nint main()\n{\n    int n = 12;\n    Sport sport[] = {\n        Sport("001",13.6),Sport("002",14.8),Sport("010",12.0),Sport("011",12.7),Sport("023",15.6),Sport("025",13.4),\n        Sport("031",14.9),Sport("036",12.6),Sport("037",13.4),Sport("102",12.5),Sport("325",15.3),Sport("438",12.7)\n    };\n    sort(sport,n);\n    for (int i = 0; i < n; i++)\n    {\n        cout << setw(6) << i + 1 << setw(6) << sport[i].num << setw(6) << sport[i].grade << endl;;\n    }\n    return 0;\n}', "class ID\n{\npublic:\n    static int weight[17];\n    static char check[11];\n    char id[18];\n    ID(char* oldid)\n    {\n        for (int i = 0; i < 15; i++)\n        {\n            id[i] = oldid[i];\n        }\n        id[15] = '#';\n    }\n    void print()\n    {\n        for (int i = 0; i < 18; i++)\n        {\n            if (id[i] == '#') break;\n            cout << id[i];\n        }\n        cout << endl;\n    }\n    void convert()\n    {\n        for (int i = 16; i>7; i--)\n        {\n            id[i] = id[i - 2];\n        }\n        id[6] = '1';\n        id[7] = '9';\n        int sum = 0;\n        for (int i = 0; i < 17; i++)\n        {\n            sum += (id[i]-48) * weight[i];\n        }\n        int y = sum % 11;\n        id[17] = check[y];\n    }\n};\nint ID::weight[17] = {7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2};\nchar ID::check[11] = { '1','0','X','9','8','7','6','5','4','3','2'};", "class Str\n{\npublic:\n    char mystr[30],repeat[30];\n    int i,len,j,max_repeat=0;\n    Str(char* p)\n    {\n        for (i = 0; p[i] != '\\0'; i++)\n        {\n            mystr[i] = p[i];\n        }\n        mystr[i] = p[i];\n        len = strlen(mystr);\n    }\n    void process()\n    {\n        int count = 0;\n        for (i = 0; i < len; i++)\n        {\n            for (j = 0; mystr[i] == mystr[i + j]; j++) {}\n            if (max_repeat < j)\n            {\n                max_repeat = j;\n            }\n        }\n        for (i = 0; i < len; i++)\n        {\n            for (j = 0; mystr[i] == mystr[i + j]; j++) {}\n            if (j == max_repeat)\n            {\n                for (int k = 0; k < max_repeat; k++)\n                {\n                    repeat[count] = mystr[i+k];\n                    count++;\n                }\n            }\n        }\n        repeat[count] = '\\0';\n    }\n    void print()\n    {\n        int i;\n        cout << mystr << endl;\n        cout << repeat << endl << max_repeat << endl;\n    }\n};", '#include<iostream>\nusing namespace std;\n\nclass Point\n{\nprivate:\n    int x, y;\npublic:\n    void setXY(int a, int b)\n    {\n        x = a;\n        y = b;\n    }\n    int getX() {\n        return this->x;\n    }\n    int getY() {\n        return this->y;\n    }\n};', 'class Circle\n{\nprivate:\n    double r;\n    static double PI;\npublic:\n    void setR(int r)\n    {\n        this->r = r;\n    }\n    double getR()\n    {\n        return this->r;\n    }\n    double getArea()\n    {\n        return PI * r * r;\n    }\n\n};\ndouble Circle::PI = 3.14159;', 'int main()\n{\n    A a[] = { A(0),A(0) ,A(0) };\n    A b[] = { A(1),A(0) ,A(0) };\n    A c[] = { A(1),A(2) ,A(3) };\n    for (int i = 0; i < 3; i++)\n    {\n        a[i].show();\n    }\n    cout << endl;\n    for (int i = 0; i < 3; i++)\n    {\n        b[i].show();\n    }\n    cout << endl;\n\n    for (int i = 0; i < 3; i++)\n    {\n        c[i].show();\n    }\n    cout << endl;\n}', 'class Salesman\n{\npublic:\n    string name;\n    int count;\n    int amount;\n    float rate;\n    static int num;\n    static int sales_amount;\n    Salesman(string a, int b, int c, float d) :name(a), count(b), amount(c), rate(d) {\n        num++;\n        sales_amount += b * c * d;\n    }\n    static void show()\n    {\n        cout << "There are "<< num <<" salesmen，sales amount is："<< sales_amount << endl;\n    }\n    static float getAver()\n    {\n        return 1.0*sales_amount / num;\n    }\n};\nint Salesman::num = 0;\nint Salesman::sales_amount = 0;', '#include<iostream>\n#include<iomanip>\nusing namespace std;\n\nclass Array\n{\npublic:\n    int* p;\n    Array() {\n        this->p = new int[6];\n    }\n    ~Array()\n    {\n        delete[] this->p;\n        this->p = NULL;\n    }\n    Array(const Array& arr)\n    {\n        this->p = new int[6];\n        for (int i = 0; i < 6; i++)\n        {\n            this->p[i] = arr.p[i];\n        }\n    }\n    Array operator+(Array& arr)\n    {\n        Array temp;\n        for (int i = 0; i < 6; i++)\n        {\n            temp.p[i] = this->p[i] + arr.p[i];\n        }\n        return temp;\n    }\n    Array &operator=(const Array& arr)\n    {\n        if (this->p != NULL)\n        {\n            delete[] this->p;\n        }\n        this->p = new int[6];\n        for (int i = 0; i < 6; i++)\n        {\n            this->p[i] = arr.p[i];\n        }\n        return *this;\n    }\n};\nistream& operator>>(istream& cin, Array& arr)\n{\n    for (int i = 0; i < 6; i++)\n    {\n        cin >> arr.p[i];\n    }\n    return cin;\n}\nostream& operator<<(ostream& cout, Array& arr)\n{\n    for (int i = 0; i < 6; i++)\n    {\n        cout << setw(3) << arr.p[i];\n        if ((i + 1) % 3 == 0)\n        {\n            cout << endl;\n        }\n    }\n    return cout;\n}', '#include<iostream>\nusing namespace std;\n\nclass MyTime\n{\npublic:\n    int hour, minute, second;\n    MyTime(int hour=0,int minute=0,int second=0):hour(hour),minute(minute),second(second){}\n    MyTime& operator++()\n    {\n        this->second++;\n        if (this->second == 60)\n        {\n            this->second = 0;\n            this->minute++;\n            if (this->minute == 60)\n            {\n                this->minute = 0;\n                this->hour++;\n                if (this->hour == 24)\n                {\n                    this->hour = 0;\n                }\n            }\n        }\n        return *this;\n    }\n};\n\nistream& operator >> (istream& cin, MyTime& time)\n{\n    cin >> time.hour >> time.minute >> time.second;\n    return cin;\n}\nostream& operator << (ostream& cout, MyTime& time)\n{\n    cout << time.hour << ":" << time.minute << ":" << time.second;\n    return cout;\n}', 'class MyDate\n{\npublic:\n    int month, day, year;\n    void setDate(int m, int d, int y)\n    {\n        this->month = m;\n        this->day = d;\n        this->year = y;\n        if (this->month < 1 || this->month>13 || this->year < 0 || this->day < 0 || this->day>32)\n        {\n            this->day = 1;\n            this->month = 1;\n            this->year = 1900;\n        }\n    }\n    MyDate& operator+=(int d)\n    {\n        this->day += d;\n        switch (this->month)\n        {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n        {\n            if (this->day > 31)\n            {\n                this->day -= 31;\n                this->month++;\n                if (this->month > 12)\n                {\n                    this->month = 1;\n                    this->year++;\n                }\n            }\n            break;\n        }\n        default:\n        {\n            if (this->month == 2 && this->day > 29) {\n                if (this->year % 4 == 0)\n                {\n                    this->day -= 28;\n                    this->month++;\n                }\n                else\n                {\n                    this->day -= 27;\n                    this->month++;\n                }\n            }\n            else if (this->day > 30)\n            {\n                this->day -= 30;\n                this->month++;\n            }\n            break;\n        }\n        }\n        return *this;\n    }\n    MyDate& operator++()\n    {\n        this->day++;\n        switch (this->month)\n        {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n        {\n            if (this->day > 31)\n            {\n                this->day -= 31;\n                this->month++;\n                if (this->month > 12)\n                {\n                    this->month = 1;\n                    this->year++;\n                }\n            }\n            break;\n        }\n        default:\n        {\n            if (this->month == 2 && this->day > 29) {\n                if (this->year % 4 == 0)\n                {\n                    this->day -= 28;\n                    this->month++;\n                }\n                else\n                {\n                    this->day -= 27;\n                    this->month++;\n                }\n            }\n            else if (this->day > 30)\n            {\n                this->day -= 30;\n                this->month++;\n            }\n            break;\n        }\n        }\n        return *this;\n    }\n    MyDate operator++(int)\n    {\n        MyDate temp = *this;\n        this->day++;\n        switch (this->month)\n        {\n        case 1:\n        case 3:\n        case 5:\n        case 7:\n        case 8:\n        case 10:\n        case 12:\n        {\n            if (this->day > 31)\n            {\n                this->day -= 31;\n                this->month++;\n                if (this->month > 12)\n                {\n                    this->month = 1;\n                    this->year++;\n                }\n            }\n            break;\n        }\n        default:\n        {\n            if (this->month == 2 && this->day > 29) {\n                if (this->year % 4 == 0)\n                {\n                    this->day -= 28;\n                    this->month++;\n                }\n                else\n                {\n                    this->day -= 27;\n                    this->month++;\n                }\n            }\n            else if (this->day > 30)\n            {\n                this->day -= 30;\n                this->month++;\n            }\n            break;\n        }\n        }\n        return temp;\n    }\n\n};\nstring months[12] = { "January","February","March","April","May","June","July","August","September","October","November","December" };\nostream& operator<<(ostream& cout, MyDate date)\n{\n    cout << months[date.month - 1] << " " << date.day << ", " << date.year ;\n    return cout;\n}', '#include<iostream>\n#include<cstring>\nusing namespace std;', 'class Student1:public Student\n{\npublic:\n    void get_value_1()\n    {\n        cin >> age >> address;\n    }\n    void display_1()\n    {\n        cout << "age: " << age << endl;\n        cout << "address: " << address << endl;\n    }\nprivate:\n    int age;\n    string address;\n};', 'class Student1:public Student\n{\npublic:\n    Student1(int num,string name,char sex,int age,string address):Student(num,name,sex),age(age),address(address) {}\n    void show()\n    {\n        cout << "num: " << num << endl;\n        cout << "name: " << name << endl;\n        cout << "sex: " << sex << endl;\n        cout << "age: " << age << endl;\n        cout << "address: " << address << endl;\n    }\nprivate:\n    int age;\n    string address;\n};', 'class Graduate:public Teacher,public Student\n{\npublic:\n    Graduate(string name,char sex,int age,string title,float socre,float wages):Person(name,sex,age),Teacher(name, sex, age,title),Student(name, sex, age,socre),wages(wages){}\n    void show()\n    {\n        cout << "name:" << this->name << endl;\n        cout << "age:" << this->age << endl;\n        cout << "sex:" << this->sex << endl;\n        cout << "score:" << this->score << endl;\n        cout << "title:" << this->title << endl;\n        cout << "wages:" << this->wages << endl;\n    }\nprotected:\n    float wages;\n};', 'Time::Time(int h, int m, int s)\n{\n this->hours = h;\n this->minutes = m;\n this->seconds = s;\n}\n\nTime Time::operator+(Time& time)\n{\n Time temp;\n temp.seconds = this->seconds + time.seconds;\n if (temp.seconds > 60)\n {\n  temp.seconds -= 60;\n  temp.minutes++;\n }\n temp.minutes += this->minutes + time.minutes;\n if (temp.minutes > 60)\n {\n  temp.minutes -= 60;\n  temp.hours++;\n }\n temp.hours += this->hours + time.hours;\n if (temp.hours > 24)\n {\n  temp.hours -= 24;\n }\n return temp;\n}\n\nvoid Time::DispTime()\n{\n cout << this->hours << "h:" << this->minutes << "m:" << this->seconds << "s" << endl;\n}', 'class boat;\nclass car\n{\npublic:\n    int weight;\n    car(int n):weight(n){}\n    friend int totalweight(boat& b, car& c);\n};\n\nclass boat\n{\npublic:\n    int weight;\n    boat(int n) :weight(n) {}\n    friend int totalweight(boat& b, car& c);\n};\n\nint totalweight(boat& b, car& c)\n{\n    return b.weight + c.weight;\n}', 'Vehicle::Vehicle(int wheels, float weight)\n{\n    this->wheels = wheels;\n    this->weight = weight;\n}\nint Vehicle::get_wheels()\n{\n    return this->wheels;\n}\n\nfloat Vehicle::get_weight()\n{\n    return this->weight;\n}\n\nvoid Vehicle::show()\n{\n    cout << "Type:Vehicle" << endl;\n    cout << "Wheel:" << this->get_wheels() << endl;\n    cout << "Weight:" << this->get_weight() << "kg" << endl;\n}\n\nclass Car:public Vehicle\n{\nprotected:\n    int loads;\npublic:\n    Car(int wheels,float weight,int loads):Vehicle(wheels,weight),loads(loads){}\n    void show();\n};\nvoid Car::show()\n{\n    cout << "Type:Car" << endl;\n    cout << "Type:Vehicle" << endl;\n    cout << "Wheel:" << this->get_wheels() << endl;\n    cout << "Weight:" << this->get_weight() << "kg" << endl;\n    cout << "Load:" << this->loads << " persons" << endl;\n}', 'Point::Point(double x, double y)\n{\n    this->x = x;\n    this->y = y;\n}\n\nvoid Point::setX(double x)\n{\n    this->x = x;\n}\n\nvoid Point::setY(double y)\n{\n    this->y = y;\n}\n\ndouble Point::distance()\n{\n    return sqrt(pow(this->getX(), 2) + pow(this->getY(), 2));\n}\n\nclass Circle\n{\nprivate:\n    Point p;\n    double r;\npublic:\n    Circle(Point ctr,double r):p(ctr),r(r){}\n    char* judge(Point p)\n    {\n        double dis;\n        char c1[] = "outside";\n        char c2[] = "inside";\n        char c3[] = "on";\n        dis = sqrt(pow(p.getX()-this->p.getX(), 2) + pow(p.getY()-this->p.getY(), 2));\n        if (dis > this->r)\n        {\n            return c1;\n        }\n        else if (dis == this->r)\n        {\n            return c3;\n        }\n        else\n        {\n            return c2;\n        }\n    }\n};', 'Vehicle::Vehicle(float price, int minute)\n{\n    this->price = price;\n    this->minute = minute;\n}\nfloat Vehicle::getPrice() { return this->price; }\nvoid Vehicle::setPrice(float price) { this->price = price; }\nint Vehicle::getMinute() { return this->minute; }\nvoid Vehicle::setMinute(int minute) { this->minute = minute; }\n\nclass Car :public Vehicle\n{\npublic:\n    Car(int minutes):Vehicle(Car_Price,minutes){}\n    string getType() { return "car"; }\n    float computeFee()\n    {\n        int n = this->getMinute() / 60;\n        int y = (this->getMinute() % 60)/30;\n        return Car_Price * (n + y);\n    }\n\n};\n\nclass Truck :public Vehicle\n{\npublic:\n    Truck(int minutes) :Vehicle(Truck_Price, minutes) {}\n    string getType() { return "truck"; }\n    float computeFee()\n    {\n        int n = this->getMinute() / 60;\n        int y = this->getMinute() % 60;\n        return Truck_Price * (n + y>0? 1:0);\n    }\n};\n\nclass Bus :public Vehicle\n{\npublic:\n    Bus(int minutes) :Vehicle(Truck_Price, minutes) {}\n    string getType() { return "bus"; }\n    float computeFee()\n    {\n        int n = this->getMinute() / 60;\n        int y = this->getMinute() % 60;\n        return Bus_Price * (n + y > 30 ? 1 : 0.5);\n    }\n};\n\nclass Parker\n{\npublic:\n    int sum;\n    Parker(){ this->sum = 0;}\n    void park(Vehicle *vp)\n    {\n        this->sum += vp->computeFee();\n    }\n    int getSum() { return this->sum; }\n};', '    static float totalMoney;\n    static void printTotal()\n    {\n        cout << "total:" << Donator::totalMoney << endl;\n    }\n\n};\nfloat Donator::totalMoney = 0;\n\nvoid Donator::setName(string name) { this->name = name; }\nvoid Donator::setMoney(float money) { this->money = money; Donator::totalMoney += this->money; }\n\nstring getMaxName(Donator dt[], int n)\n{\n    string max_name = dt[0].getName();\n    float max_money = dt[0].getMoney();\n    for (int i = 1; i < n; i++)\n    {\n        if (dt[i].getMoney() > max_money)\n        {\n            max_name = dt[i].getName();\n            max_money = dt[i].getMoney();\n\n        }\n    }\n    return max_name;\n}', '#include<iostream>\n#include<string.h>\nusing namespace std;', 'float& cut(float& a, float& b)\n{\n    return a > b ? b : a;\n}', '        s[i].setCity(city);\n        s[i].setVolume(volume);\n    }\n    double max_volume = s[0].getVolume(), sum = s[0].getVolume();\n    int max_index=0;\n    for (int i = 1; i < n; i++)\n    {\n        if (s[i].getProv() == s[i - 1].getProv())\n        {\n            if (max_volume < s[i].getVolume())\n            {\n                max_volume = s[i].getVolume();\n                max_index = i;\n            }\n            sum += s[i].getVolume();\n        }\n        else\n        {\n            cout << s[max_index].getProv() << " sum=" << sum << " max=" << s[max_index].getCity() << "," << s[max_index].getVolume() << endl;\n            max_volume = s[i].getVolume();\n            max_index = i;\n            sum = s[i].getVolume();\n        }\n    }\n    cout << s[max_index].getProv() << " sum=" << sum << " max=" << s[max_index].getCity() << "," << s[max_index].getVolume() << endl;\n\n}\nvoid Sale::setProv(string p) { this->prov = p; }\nvoid Sale::setCity(string c) { this->city = c; }\nvoid Sale::setVolume(double v) { this->volume = v; }\nstring Sale::getProv() { return this->prov; }\nstring Sale::getCity() { return this->city; }\ndouble Sale::getVolume() { return this->volume;', 'template<class T>\nclass MyVector\n{\nprivate:\n    T* p;\n    int n;\npublic:\n    MyVector(int n)\n    {\n        this->n = n;\n        this->p = new T[n];\n    }\n    ~MyVector()\n    {\n        delete[] p;\n    }\n    void set()\n    {\n        for (int i = 0; i < this->n; i++)\n        {\n            cin >> this->p[i];\n        }\n    }\n    void display()\n    {\n        for (int i = 0; i < this->n; i++)\n        {\n            cout << this->p[i] << " ";\n        }\n        cout << endl;\n    }\n};', 'class Circle\n{\nprivate:\n    static float PI;\n    float r;\npublic:\n    Circle(float r) :r(r) { cout << "Constructor called" << endl; }\n    Circle(const Circle& c)\n    {\n        this->r = c.r;\n        cout << "Copy constructor called" <<  endl;\n    }\n    ~Circle()\n    {\n        cout << "Destructor called" << endl;\n    }\n    float area()\n    {\n        return PI * r * r;\n    }\n    float perimeter()\n    {\n        return 2 * PI * r;\n    }\n\n};\nfloat Circle::PI = 3.14;', '#include<iostream>\nusing namespace std;\n\nclass CComplex\n{\nprivate:\n    double real;\n    double imag;\npublic:\n    CComplex(double r=0,double i=0):real(r),imag(i){}\n    void display()\n    {\n        cout << this->real << (this->imag>0 ? "+":"") << this->imag << "i" << endl;\n    }\n    friend CComplex add(CComplex& c1, CComplex& c2);\n    friend CComplex sub(CComplex& c1, CComplex& c2);\n\n};\nCComplex add(CComplex &c1, CComplex &c2)\n{\n    CComplex temp;\n    temp.real = c1.real + c2.real;\n    temp.imag = c1.imag + c2.imag;\n    return temp;\n}\nCComplex sub(CComplex &c1, CComplex &c2)\n{\n    CComplex temp;\n    temp.real = c1.real - c2.real;\n    temp.imag = c1.imag - c2.imag;\n    return temp;\n}', 'class Circle:public Shape\n{\npublic:\n    double r;\n    static double PI;\n    Circle(double r):r(r){}\n    double getArea()\n    {\n        return PI * r * r;\n    }\n    double getPerim()\n    {\n        return 2 * PI * r;\n    }\n};\ndouble Circle::PI = 3.14;\n\nclass Rectangle :public Shape\n{\npublic:\n    double l,w;\n    Rectangle(double l,double w) :l(l),w(w) {}\n    double getArea()\n    {\n        return l*w;\n    }\n    double getPerim()\n    {\n        return 2 *(l + w);\n    }\n};\n\nvoid print(Shape* p)\n{\n    cout << "Area:" << p->getArea() << endl;\n    cout << "Perimeter:" << p->getPerim() << endl;\n}']
    n = 1
    for url in chengxupianduan_urls:
        driver.get(url)
        textarea = driver.find_element(by=By.NAME,value="answer1")
        driver.execute_script("arguments[0].scrollIntoView();", textarea)  # 拖动到可见的元素去
        textarea.clear()
        textarea.send_keys(chengxupianduan_answers[n-1])
        # chengxupianduan_answers.append(textarea.text)
        submit = driver.find_element(by=By.ID,value="Submit")
        driver.execute_script("arguments[0].scrollIntoView();", submit)  # 拖动到可见的元素去
        submit.click()
        n += 1
        time.sleep(3)
        # break

    # print(chengxupianduan_answers)

    print("刷完了！！！！！！！！！！！！！！！！！")
    driver.quit()

if __name__ == '__main__':
    username = ""
    password = ""
    shua(username,password)